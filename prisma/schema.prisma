generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid()) @db.Uuid
  email     String     @unique
  name      String
  password  String
  sales     Sale[]
  Products  Product[]
  Clients   Client[]
  Shipments Shipment[]

  @@map("users")
}

model Product {
  id               String            @id @default(uuid()) @db.Uuid
  userId           String            @map("user_id") @db.Uuid
  name             String
  value            Int
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  shipmentProducts ShipmentProduct[]
  saleProducts     SaleProduct[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("products")
}

model Client {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  name      String
  adress    String
  contact   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  sales     Sale[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("clients")
}

model Shipment {
  id               String            @id @default(uuid()) @db.Uuid
  userId           String            @map("user_id") @db.Uuid
  location         String
  createdAt        DateTime          @map("created_at")
  updatedAt        DateTime          @map("updated_at")
  shipmentProducts ShipmentProduct[]
  sales            Sale[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("shipments")
}

model ShipmentProduct {
  id           String        @id @default(uuid()) @db.Uuid
  shipmentId   String        @map("shipment_id") @db.Uuid
  productId    String        @map("product_id") @db.Uuid
  name         String
  value        Int
  status       String
  createdAt    DateTime      @map("created_at")
  updatedAt    DateTime      @map("updated_at")
  SaleProducts SaleProduct[]

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("shipment_products")
}

model Sale {
  id           String        @id @default(uuid()) @db.Uuid
  clientId     String        @map("client_id") @db.Uuid
  userId       String        @map("user_id") @db.Uuid
  shipmentId   String?       @map("shipment_id") @db.Uuid
  value        Int
  status       String
  createdAt    DateTime      @map("created_at")
  updatedAt    DateTime      @map("updated_at")
  saleProducts SaleProduct[]
  Payments     Payments[]

  client   Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipment Shipment? @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([clientId])
  @@index([shipmentId])
  @@index([status])
  @@map("sales")
}

model SaleProduct {
  id                String   @id @default(uuid()) @db.Uuid
  saleId            String   @map("sale_id") @db.Uuid
  productId         String   @map("product_id") @db.Uuid
  shipmentProductId String?  @map("shipment_product_id") @db.Uuid
  value             Int
  createdAt         DateTime @map("created_at")
  updatedAt         DateTime @map("updated_at")

  sale            Sale             @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  shipmentProduct ShipmentProduct? @relation(fields: [shipmentProductId], references: [id], onDelete: Cascade)

  @@map("sale_products")
}

model Payments {
  id        String   @id @default(uuid()) @db.Uuid
  saleId    String   @map("sale_id") @db.Uuid
  type      String
  value     Int
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  sale Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@map("payments")
}
